name: Docker Build Reusable Workflow

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: './Dockerfile'
      context:
        required: false
        type: string
        default: '.'
      build_args:
        required: false
        type: string
        default: ''
      run_trivy:
        required: false
        type: boolean
        default: true
      continue_on_trivy_error:
        required: false
        type: boolean
        default: true
      run_gitleaks:
        required: false
        type: boolean
        default: true
      continue_on_gitleaks_error:
        required: false
        type: boolean
        default: true
      run_owasp:
        required: false
        type: boolean
        default: true
      continue_on_owasp_error:
        required: false
        type: boolean
        default: true
    secrets:
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  docker_build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ inputs.image_name }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker image
        run: |
          echo "Building Docker image: ${{ inputs.image_name }}"
          docker build \
            -t ${{ inputs.image_name }} \
            -f ${{ inputs.dockerfile_path }} \
            ${{ inputs.build_args }} \
            ${{ inputs.context }}

  trivy_scan:
    if: ${{ inputs.run_trivy }}
    runs-on: ubuntu-latest
    needs: docker_build
    continue-on-error: ${{ inputs.continue_on_trivy_error }}
    steps:
      - name: Trivy scan inside Docker
        run: |
          mkdir -p trivy-reports
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}/trivy-reports:/output \
            aquasec/trivy:latest \
            image ${{ inputs.image_name }} \
            --format table \
            --ignore-unfixed \
            --vuln-type os,library \
            -o /output/trivy-report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.txt

  gitleaks_scan:
    if: ${{ inputs.run_gitleaks }}
    runs-on: ubuntu-latest
    needs: docker_build
    continue-on-error: ${{ inputs.continue_on_gitleaks_error }}
    steps:
      - name: Run Gitleaks scan in Docker
        run: |
          mkdir -p gitleaks-reports
          docker run --rm \
            -v ${{ github.workspace }}:/repo \
            -v ${{ github.workspace }}/gitleaks-reports:/output \
            zricethezav/gitleaks:latest detect \
            --source="/repo" \
            --report-format="json" \
            --report-path="/output/gitleaks-report.json"

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-reports/gitleaks-report.json

  owasp_scan:
    if: ${{ inputs.run_owasp }}
    runs-on: ubuntu-latest
    needs: docker_build
    continue-on-error: ${{ inputs.continue_on_owasp_error }}
    steps:
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "MyProject"
          path: "."
          format: "HTML"
          out: "dependency-check-reports"

      - name: Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-html-report
          path: dependency-check-reports/dependency-check-report.html

  slack_notify:
    runs-on: ubuntu-latest
    needs: [trivy_scan, gitleaks_scan, owasp_scan]
    if: always()
    steps:
      - name: Send Slack Notification
        uses: act10ns/slack@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#github-actions-notification'
          status: ${{ job.status }}
