name: Docker Build Reusable Workflow

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: './Dockerfile'
      context:
        required: false
        type: string
        default: '.'
      build_args:
        required: false
        type: string
        default: ''

jobs:
  docker_build:
    runs-on: ubuntu-latest
    steps:
      - name:  Checkout source code
        uses: actions/checkout@v4

      - name:  Build Docker image
        run: |
          echo " Building Docker image: ${{ inputs.image_name }}"
          docker build \
            -t ${{ inputs.image_name }} \
            -f ${{ inputs.dockerfile_path }} \
            ${{ inputs.build_args }} \
            ${{ inputs.context }}

      - name:  Dockerized Trivy scan and generate report
        run: |
          echo " Running Trivy inside Docker"
          mkdir -p trivy-reports
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}/trivy-reports:/output \
            aquasec/trivy:latest \
            image ${{ inputs.image_name }} \
            --format table \
            --ignore-unfixed \
            --vuln-type os,library \
            -o /output/trivy-report.txt

      - name:  Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.txt

      - name:  Dockerized Gitleaks scan and generate report
        run: |
          echo " Running Gitleaks inside Docker"
          mkdir -p gitleaks-reports
          docker run --rm \
            -v ${{ github.workspace }}:/repo \
            -v ${{ github.workspace }}/gitleaks-reports:/output \
            zricethezav/gitleaks:latest detect \
            --source="/repo" \
            --report-format="json" \
            --report-path="/output/gitleaks-report.json"

      - name:  Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-reports/gitleaks-report.json

      - name: ðŸš¦ OWASP Dependency Check
        # This step runs the OWASP Dependency Check tool in a Docker container
        # to scan your project's dependencies for known vulnerabilities.
        run: |
          echo "Checking dependencies with OWASP Dependency Check..."
          mkdir -p dependency-check-report
          # Create a directory for the ODC data cache (vulnerability databases)
          # This helps with persistence across runs and ensures write permissions.
          mkdir -p ${{ github.workspace }}/.owasp-data-cache

          docker run --rm \
            --volume "${{ github.workspace }}:/src" \
            --volume "${{ github.workspace }}/dependency-check-report:/report" \
            # Mount a dedicated volume for ODC's data directory.
            # The path inside the container must match ODC's expected data location,
            # which is typically /usr/share/dependency-check/data for the official image.
            --volume "${{ github.workspace }}/.owasp-data-cache:/usr/share/dependency-check/data" \
            owasp/dependency-check:latest \
            --project "MyProject" \
            --scan /src \
            --format "ALL" \
            --out /report \
            # Explicitly tell ODC where its data directory is located inside the container.
            --data "/usr/share/dependency-check/data" \
            # Enable debug logging for more detailed error messages. This will be crucial for debugging.
            --debug \
            # Disables failing the scan based on CVSS scores. Remove this for stricter checks later.
            --disableFailOnCVSS


      - name:  Upload OWASP Dependency Check Reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report/

